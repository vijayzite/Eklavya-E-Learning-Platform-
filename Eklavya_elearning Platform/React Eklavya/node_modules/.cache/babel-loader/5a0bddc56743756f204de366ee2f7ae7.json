{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SUSH\\\\Desktop\\\\Latest\\\\React Eklavya\\\\src\\\\components\\\\course\\\\VideoUpload.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport Select from \"react-select\";\nimport { Button, Card, CardBody, CardHeader, Col, Container, Form, FormGroup, Input, Label, Row } from \"reactstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction VideoUpload() {\n  _s();\n\n  //   const navigate = useNavigate();\n  //   const [flag, setFlag] = useState({ 0: \"\" });\n  const [selectedCourse, setSelectedCourse] = useState(\"\");\n  const [coursesList, setCoursesList] = useState();\n  const [selectedChapter, setSelectedChapter] = useState(\"\");\n  const [chaptersList, setChaptersList] = useState([]);\n  const [chaptersDataList, setChaptersDataList] = useState([]);\n  const [selectedSubtopic, setSelectedSubtopic] = useState(\"\");\n  const [subtopicList, setSubtopicList] = useState();\n  const [category, setCategory] = useState({});\n  const [message, setMessage] = useState(\"\");\n  const [selectedSegName, setSelectedSegName] = useState(\"\");\n  const [selectedFile, setSelectedFile] = useState();\n  const [isFilePicked, setIsFilePicked] = useState(false);\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\n  const [currentFile, setCurrentFile] = useState(undefined);\n  const userID = localStorage.getItem(\"userRoleId\") ? JSON.parse(localStorage.getItem(\"userRoleId\")) : {}; //get course\n\n  useEffect(() => {\n    //get courses list\n    const getCoursesList = async () => {\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\"\n          }\n        }; //destructuring original => res.data\n\n        const {\n          data\n        } = await axios.post(\"http://localhost:9090/api/elearning/getcourses\", {\n          userId: userID\n        }, config); //splite data for courses dropwdown(label:course name value:course id)\n\n        const result = [];\n\n        for (let index = 0; index < data.length; index++) {\n          const element = data[index];\n          let obj = {};\n          let temp = element.split(\",\");\n          obj.value = temp[0];\n          obj.label = temp[1];\n          result.push(obj);\n        }\n\n        setCoursesList(result);\n        console.log(result);\n        console.log(\"course list:\", coursesList);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    getCoursesList(); // setSelectedCourse(\"\");\n    // setSelectedChapter(\"\");\n  }, []); //get chapters\n\n  useEffect(() => {\n    //get chapters list\n    const cId = selectedCourse.value; // alert(cId);\n\n    if (coursesList === undefined) {// alert(cId);\n    } else {\n      const getChaptersList = async () => {\n        try {\n          const config = {\n            headers: {\n              \"Content-type\": \"application/json\"\n            }\n          }; //destructuring original => res.data\n\n          const {\n            data\n          } = await axios.post(`http://localhost:9090/api/elearning/chaptersdata/${cId}`, config);\n          console.log(data); //splite data for courses dropwdown(label:course name value:course id)\n\n          const result = [];\n\n          for (let index = 0; index < data.length; index++) {\n            const element = data[index];\n            let obj = {};\n            obj.value = element.chapterId;\n            obj.label = element.chapterTitle;\n            result.push(obj);\n          }\n\n          console.log(\"result\", result); // setChaptersDataList(...data);\n\n          console.log(\"ch data list\", chaptersDataList);\n          setChaptersDataList(result); // setChaptersList(data);\n          // console.log(result);\n          // console.log(\"chapters list:\", chaptersList);\n        } catch (error) {\n          console.log(error);\n        }\n      };\n\n      getChaptersList();\n    }\n  }, [selectedCourse]); //get subtopics\n\n  useEffect(() => {\n    //get chapters list\n    const sId = selectedChapter.value; // alert(cId);\n\n    if (chaptersDataList === undefined) {// alert(\"subt\", sId);\n    } else {\n      const getSubtList = async () => {\n        try {\n          const config = {\n            headers: {\n              \"Content-type\": \"application/json\"\n            }\n          }; //destructuring original => res.data\n\n          const {\n            data\n          } = await axios.post(`http://localhost:9090/api/elearning/subtdata/${sId}`, config);\n          console.log(data); //splite data for courses dropwdown(label:course name value:course id)\n\n          const result = [];\n\n          for (let index = 0; index < data.length; index++) {\n            const element = data[index];\n            let obj = {};\n            obj.value = element.subtId;\n            obj.label = element.subtTitle;\n            result.push(obj);\n          }\n\n          console.log(\"data..\", selectedCourse.value, selectedChapter.value + \" \" + selectedSubtopic.value);\n          console.log(\"result\", result); // setChaptersDataList(...data);\n          // console.log(\"ch data list\", chaptersDataList);\n\n          setSubtopicList(result); // setChaptersList(data);\n          // console.log(result);\n          // console.log(\"chapters list:\", chaptersList);\n        } catch (error) {\n          console.log(error);\n        }\n      };\n\n      getSubtList();\n    }\n  }, [selectedChapter]); // useEffect(() => {\n  //   //get chapters list\n  //   const cid = selectedCourse.value;\n  //   if(selectedChapter!=\"\"){\n  //     const getChaptersList = async () => {\n  //       try {\n  //         const config = {\n  //           headers: {\n  //             \"Content-type\": \"application/json\",\n  //           },\n  //         };\n  //         //destructuring original => res.data\n  //         const { data } = await axios.post(\n  //           \"http://localhost:9090/api/elearning/getchapters\",\n  //           { courseId: cid },\n  //           config\n  //         );\n  //         //splite data for courses dropwdown(label:course name value:course id)\n  //         const result = [];\n  //         for (let index = 0; index < data.length; index++) {\n  //           const element = data[index];\n  //           let obj = {};\n  //           let temp = element.split(\",\");\n  //           obj.value = temp[0];\n  //           obj.label = temp[1];\n  //           result.push(obj);\n  //         }\n  //         setChaptersList(result);\n  //         // console.log(result);\n  //         console.log(\"subtopic list:\", subtopicList);\n  //       } catch (error) {\n  //         console.log(error);\n  //       }\n  //     };\n  //     getChaptersList();\n  //   }\n  // }, [selectedChapter]);\n  // useEffect(() => {\n  //   //get courses list\n  //   if (selectedSegName !== \"\") {\n  //     const getCoursesList = async () => {\n  //       try {\n  //         const config = {\n  //           headers: {\n  //             \"Content-type\": \"application/json\",\n  //           },\n  //         };\n  //         //destructuring original => res.data\n  //         const { data } = await axios.post(\n  //           \"http://localhost:9090/api/elearning/getcourses\",\n  //           { userId: userID },\n  //           config\n  //         );\n  //         //splite data for courses dropwdown(label:course name value:course id)\n  //         const result = [];\n  //         for (let index = 0; index < data.length; index++) {\n  //           const element = data[index];\n  //           let obj = {};\n  //           let temp = element.split(\",\");\n  //           obj.value = temp[0];\n  //           obj.label = temp[1];\n  //           result.push(obj);\n  //         }\n  //         setCoursesList(result);\n  //         console.log(result);\n  //         console.log(\"course list:\", coursesList);\n  //       } catch (error) {\n  //         console.log(error);\n  //       }\n  //     };\n  //     getCoursesList();\n  //     setSelectedCourse(\"\");\n  //     setSelectedChapter(\"\");\n  //   }\n  // }, [selectedSegName]);\n  // useEffect(() => {\n  //   alert(\"get chapter\");\n  //   //get chapters list\n  //   const cid = selectedCourse.value;\n  //   if (\n  //     selectedCourse.label === \"Chapter\" ||\n  //     selectedCourse.label === \"Subtopic\"\n  //   ) {\n  //     const getChaptersList = async () => {\n  //       try {\n  //         const config = {\n  //           headers: {\n  //             \"Content-type\": \"application/json\",\n  //           },\n  //         };\n  //         //destructuring original => res.data\n  //         const { data } = await axios.post(\n  //           \"http://localhost:9090/api/elearning/getchapters\",\n  //           { courseId: cid },\n  //           config\n  //         );\n  //         //splite data for courses dropwdown(label:course name value:course id)\n  //         const result = [];\n  //         for (let index = 0; index < data.length; index++) {\n  //           const element = data[index];\n  //           let obj = {};\n  //           let temp = element.split(\",\");\n  //           obj.value = temp[0];\n  //           obj.label = temp[1];\n  //           result.push(obj);\n  //         }\n  //         setChaptersList(result);\n  //         // console.log(result);\n  //         console.log(\"chapters list:\", chaptersList);\n  //       } catch (error) {\n  //         console.log(error);\n  //       }\n  //     };\n  //     getChaptersList();\n  //   }\n  // }, [selectedCourse]);\n\n  const selectFile = event => {\n    setSelectedFiles(event.target.files); // setSelectedFile(event.target.files[0]);\n  };\n\n  const upload = e => {\n    e.preventDefault();\n    let currentFile = selectedFiles[0];\n    setCurrentFile(currentFile);\n\n    const uploadImage = async () => {\n      let formData = new FormData();\n      formData.append(\"image\", selectedFiles[0]);\n\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"multipart/form-data\"\n          }\n        }; //destructuring original => res.data\n\n        const {\n          data\n        } = await axios.post(\"http://localhost:9090/api/elearning/file/uploadimg\", {\n          image: currentFile,\n          courseId: selectedCourse.value,\n          userId: userID,\n          chapterId: selectedChapter.value,\n          subtId: selectedSubtopic.value\n        }, config); //getCoursesList();\n\n        setSelectedCourse(\"\");\n        setSelectedChapter(\"\");\n        setSelectedSubtopic(\"\"); // setMnfId(data);\n        // console.log(mnfId);\n\n        alert(data.message);\n      } catch (error) {\n        console.log(error);\n      }\n    }; // if (selectedSegName.value === \"1\") {\n    //   // submit chapter details along with uploaded file\n    //   const submitCourse = async () => {};\n    // }\n    // //else submit course and chapter details along with uploaded file\n    // if (selectedSegName.value === \"2\") {\n    //   //\n    //   const submitChapter = async () => {};\n    // }\n    // //else submit course, chapter and subtopic details along with uploaded file\n    // if (selectedSegName.value === \"3\") {\n    //   //\n    //   const submitSubt = async () => {};\n    // }\n\n\n    uploadImage();\n  };\n\n  const changeHandler = event => {\n    setSelectedFile(event.target.files[0]);\n    console.log(event.target.files); // setIsSelected(true);\n  };\n\n  const handleSubmission = async e => {\n    e.preventDefault();\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n    setMessage(\"User Register Successfully\"); //on submit sucessfull redirec to next form to NewCourseTopic get course details\n    // navigate(\"/instructor/newtutorial/newchapter\")\n  }; //   const handleChange = (e) => {\n  //   const handleChange = (e) => {\n  //   const handleChange = (e) => {\n  //   const handleChange = (e) => {\n  //     setFlag(e.target.value);\n  //     console.log(\"flag\", flag);\n  //   };\n  // useEffect(() => {\n  //   console.log(\"cat: \", selectedSegName);\n  // }, [selectedSegName]);\n\n\n  const options = [{\n    value: \"0\",\n    label: \"Select\"\n  }, {\n    value: \"1\",\n    label: \"Course\"\n  }, {\n    value: \"2\",\n    label: \"Chapter\"\n  }, {\n    value: \"3\",\n    label: \"Subtopic\"\n  }];\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"mt-5\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"pt-5 mb-5\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        sm: {\n          size: 6,\n          offset: 3\n        },\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          color: \"dark\",\n          outline: true,\n          children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n            className: \"text-center\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Upload Videos\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n            children: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(Label, {\n                  for: \"\",\n                  children: \"Select Course\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 450,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Select, {\n                  value: selectedCourse,\n                  onChange: item => {\n                    setSelectedCourse(item);\n                  },\n                  options: coursesList // getOptionValue={(item) => item}\n                  // getOptionLabel={(item) => item}\n                  ,\n                  placeholder: selectedCourse === \"\" ? \"Select course for you want to upload\" : selectedCourse,\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 451,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true), /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(Label, {\n                  for: \"\",\n                  children: \"Select Chapter Title\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 469,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Select, {\n                  value: selectedChapter,\n                  onChange: item => {\n                    setSelectedChapter(item);\n                  },\n                  options: chaptersDataList // getOptionValue={(item) => item}\n                  // getOptionLabel={(item) => item}\n                  ,\n                  placeholder: selectedChapter === \"\" ? \"Select chapter\" : selectedChapter\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 470,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true), /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(Label, {\n                  for: \"\",\n                  children: \"Select Subtopic Title\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 487,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Select, {\n                  value: selectedSubtopic,\n                  onChange: item => {\n                    setSelectedSubtopic(item);\n                  },\n                  options: subtopicList // getOptionValue={(item) => item}\n                  // getOptionLabel={(item) => item}\n                  ,\n                  placeholder: selectedSubtopic === \"\" ? \"Select subtopic under u wanna upload \" : selectedSubtopic\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 488,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true), /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"btn btn-default\",\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"file\",\n                    onChange: selectFile\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 506,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 505,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-success\",\n                  onClick: upload,\n                  children: \"Upload\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 509,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 689,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 440,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VideoUpload, \"9ucOYHidqne3kdtkj1C3UU53nP4=\");\n\n_c = VideoUpload;\nexport default VideoUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoUpload\");","map":{"version":3,"names":["axios","React","useEffect","useState","Select","Button","Card","CardBody","CardHeader","Col","Container","Form","FormGroup","Input","Label","Row","VideoUpload","selectedCourse","setSelectedCourse","coursesList","setCoursesList","selectedChapter","setSelectedChapter","chaptersList","setChaptersList","chaptersDataList","setChaptersDataList","selectedSubtopic","setSelectedSubtopic","subtopicList","setSubtopicList","category","setCategory","message","setMessage","selectedSegName","setSelectedSegName","selectedFile","setSelectedFile","isFilePicked","setIsFilePicked","selectedFiles","setSelectedFiles","undefined","currentFile","setCurrentFile","userID","localStorage","getItem","JSON","parse","getCoursesList","config","headers","data","post","userId","result","index","length","element","obj","temp","split","value","label","push","console","log","error","cId","getChaptersList","chapterId","chapterTitle","sId","getSubtList","subtId","subtTitle","selectFile","event","target","files","upload","e","preventDefault","uploadImage","formData","FormData","append","image","courseId","alert","changeHandler","handleSubmission","submitHandler","options","size","offset","item"],"sources":["C:/Users/SUSH/Desktop/Latest/React Eklavya/src/components/course/VideoUpload.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  Container,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Row,\r\n} from \"reactstrap\";\r\n\r\nfunction VideoUpload() {\r\n  //   const navigate = useNavigate();\r\n\r\n  //   const [flag, setFlag] = useState({ 0: \"\" });\r\n\r\n  const [selectedCourse, setSelectedCourse] = useState(\"\");\r\n  const [coursesList, setCoursesList] = useState();\r\n\r\n  const [selectedChapter, setSelectedChapter] = useState(\"\");\r\n  const [chaptersList, setChaptersList] = useState([]);\r\n\r\n  const [chaptersDataList, setChaptersDataList] = useState([]);\r\n\r\n  const [selectedSubtopic, setSelectedSubtopic] = useState(\"\");\r\n  const [subtopicList, setSubtopicList] = useState();\r\n\r\n  const [category, setCategory] = useState({});\r\n\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const [selectedSegName, setSelectedSegName] = useState(\"\");\r\n\r\n  const [selectedFile, setSelectedFile] = useState();\r\n\r\n  const [isFilePicked, setIsFilePicked] = useState(false);\r\n\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n\r\n  const userID = localStorage.getItem(\"userRoleId\")\r\n    ? JSON.parse(localStorage.getItem(\"userRoleId\"))\r\n    : {};\r\n\r\n  //get course\r\n  useEffect(() => {\r\n    //get courses list\r\n\r\n    const getCoursesList = async () => {\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n          },\r\n        };\r\n        //destructuring original => res.data\r\n        const { data } = await axios.post(\r\n          \"http://localhost:9090/api/elearning/getcourses\",\r\n          { userId: userID },\r\n          config\r\n        );\r\n\r\n        //splite data for courses dropwdown(label:course name value:course id)\r\n        const result = [];\r\n        for (let index = 0; index < data.length; index++) {\r\n          const element = data[index];\r\n          let obj = {};\r\n          let temp = element.split(\",\");\r\n\r\n          obj.value = temp[0];\r\n          obj.label = temp[1];\r\n          result.push(obj);\r\n        }\r\n\r\n        setCoursesList(result);\r\n        console.log(result);\r\n        console.log(\"course list:\", coursesList);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    getCoursesList();\r\n    // setSelectedCourse(\"\");\r\n    // setSelectedChapter(\"\");\r\n  }, []);\r\n\r\n  //get chapters\r\n  useEffect(() => {\r\n    //get chapters list\r\n    const cId = selectedCourse.value;\r\n    // alert(cId);\r\n    if (coursesList === undefined) {\r\n      // alert(cId);\r\n    } else {\r\n      const getChaptersList = async () => {\r\n        try {\r\n          const config = {\r\n            headers: {\r\n              \"Content-type\": \"application/json\",\r\n            },\r\n          };\r\n          //destructuring original => res.data\r\n          const { data } = await axios.post(\r\n            `http://localhost:9090/api/elearning/chaptersdata/${cId}`,\r\n\r\n            config\r\n          );\r\n          console.log(data);\r\n          //splite data for courses dropwdown(label:course name value:course id)\r\n          const result = [];\r\n          for (let index = 0; index < data.length; index++) {\r\n            const element = data[index];\r\n            let obj = {};\r\n\r\n            obj.value = element.chapterId;\r\n            obj.label = element.chapterTitle;\r\n\r\n            result.push(obj);\r\n          }\r\n\r\n          console.log(\"result\", result);\r\n          // setChaptersDataList(...data);\r\n          console.log(\"ch data list\", chaptersDataList);\r\n          setChaptersDataList(result);\r\n\r\n          // setChaptersList(data);\r\n          // console.log(result);\r\n          // console.log(\"chapters list:\", chaptersList);\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      };\r\n      getChaptersList();\r\n    }\r\n  }, [selectedCourse]);\r\n\r\n  //get subtopics\r\n\r\n  useEffect(() => {\r\n    //get chapters list\r\n    const sId = selectedChapter.value;\r\n    // alert(cId);\r\n    if (chaptersDataList === undefined) {\r\n      // alert(\"subt\", sId);\r\n    } else {\r\n      const getSubtList = async () => {\r\n        try {\r\n          const config = {\r\n            headers: {\r\n              \"Content-type\": \"application/json\",\r\n            },\r\n          };\r\n          //destructuring original => res.data\r\n          const { data } = await axios.post(\r\n            `http://localhost:9090/api/elearning/subtdata/${sId}`,\r\n\r\n            config\r\n          );\r\n          console.log(data);\r\n          //splite data for courses dropwdown(label:course name value:course id)\r\n          const result = [];\r\n          for (let index = 0; index < data.length; index++) {\r\n            const element = data[index];\r\n            let obj = {};\r\n\r\n            obj.value = element.subtId;\r\n            obj.label = element.subtTitle;\r\n\r\n            result.push(obj);\r\n          }\r\n\r\n          console.log(\r\n            \"data..\",\r\n            selectedCourse.value,\r\n            selectedChapter.value + \" \" + selectedSubtopic.value\r\n          );\r\n          console.log(\"result\", result);\r\n          // setChaptersDataList(...data);\r\n          // console.log(\"ch data list\", chaptersDataList);\r\n          setSubtopicList(result);\r\n\r\n          // setChaptersList(data);\r\n          // console.log(result);\r\n          // console.log(\"chapters list:\", chaptersList);\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      };\r\n      getSubtList();\r\n    }\r\n  }, [selectedChapter]);\r\n\r\n  // useEffect(() => {\r\n\r\n  //   //get chapters list\r\n  //   const cid = selectedCourse.value;\r\n  //   if(selectedChapter!=\"\"){\r\n  //     const getChaptersList = async () => {\r\n  //       try {\r\n  //         const config = {\r\n  //           headers: {\r\n  //             \"Content-type\": \"application/json\",\r\n  //           },\r\n  //         };\r\n  //         //destructuring original => res.data\r\n  //         const { data } = await axios.post(\r\n  //           \"http://localhost:9090/api/elearning/getchapters\",\r\n  //           { courseId: cid },\r\n  //           config\r\n  //         );\r\n\r\n  //         //splite data for courses dropwdown(label:course name value:course id)\r\n  //         const result = [];\r\n  //         for (let index = 0; index < data.length; index++) {\r\n  //           const element = data[index];\r\n  //           let obj = {};\r\n  //           let temp = element.split(\",\");\r\n\r\n  //           obj.value = temp[0];\r\n  //           obj.label = temp[1];\r\n  //           result.push(obj);\r\n  //         }\r\n\r\n  //         setChaptersList(result);\r\n  //         // console.log(result);\r\n  //         console.log(\"subtopic list:\", subtopicList);\r\n  //       } catch (error) {\r\n  //         console.log(error);\r\n  //       }\r\n  //     };\r\n  //     getChaptersList();\r\n  //   }\r\n\r\n  // }, [selectedChapter]);\r\n\r\n  // useEffect(() => {\r\n  //   //get courses list\r\n  //   if (selectedSegName !== \"\") {\r\n  //     const getCoursesList = async () => {\r\n  //       try {\r\n  //         const config = {\r\n  //           headers: {\r\n  //             \"Content-type\": \"application/json\",\r\n  //           },\r\n  //         };\r\n  //         //destructuring original => res.data\r\n  //         const { data } = await axios.post(\r\n  //           \"http://localhost:9090/api/elearning/getcourses\",\r\n  //           { userId: userID },\r\n  //           config\r\n  //         );\r\n\r\n  //         //splite data for courses dropwdown(label:course name value:course id)\r\n  //         const result = [];\r\n  //         for (let index = 0; index < data.length; index++) {\r\n  //           const element = data[index];\r\n  //           let obj = {};\r\n  //           let temp = element.split(\",\");\r\n\r\n  //           obj.value = temp[0];\r\n  //           obj.label = temp[1];\r\n  //           result.push(obj);\r\n  //         }\r\n\r\n  //         setCoursesList(result);\r\n  //         console.log(result);\r\n  //         console.log(\"course list:\", coursesList);\r\n  //       } catch (error) {\r\n  //         console.log(error);\r\n  //       }\r\n  //     };\r\n\r\n  //     getCoursesList();\r\n  //     setSelectedCourse(\"\");\r\n  //     setSelectedChapter(\"\");\r\n  //   }\r\n  // }, [selectedSegName]);\r\n\r\n  // useEffect(() => {\r\n  //   alert(\"get chapter\");\r\n  //   //get chapters list\r\n  //   const cid = selectedCourse.value;\r\n\r\n  //   if (\r\n  //     selectedCourse.label === \"Chapter\" ||\r\n  //     selectedCourse.label === \"Subtopic\"\r\n  //   ) {\r\n  //     const getChaptersList = async () => {\r\n  //       try {\r\n  //         const config = {\r\n  //           headers: {\r\n  //             \"Content-type\": \"application/json\",\r\n  //           },\r\n  //         };\r\n  //         //destructuring original => res.data\r\n  //         const { data } = await axios.post(\r\n  //           \"http://localhost:9090/api/elearning/getchapters\",\r\n  //           { courseId: cid },\r\n  //           config\r\n  //         );\r\n\r\n  //         //splite data for courses dropwdown(label:course name value:course id)\r\n  //         const result = [];\r\n  //         for (let index = 0; index < data.length; index++) {\r\n  //           const element = data[index];\r\n  //           let obj = {};\r\n  //           let temp = element.split(\",\");\r\n\r\n  //           obj.value = temp[0];\r\n  //           obj.label = temp[1];\r\n  //           result.push(obj);\r\n  //         }\r\n\r\n  //         setChaptersList(result);\r\n  //         // console.log(result);\r\n  //         console.log(\"chapters list:\", chaptersList);\r\n  //       } catch (error) {\r\n  //         console.log(error);\r\n  //       }\r\n  //     };\r\n\r\n  //     getChaptersList();\r\n  //   }\r\n  // }, [selectedCourse]);\r\n\r\n  const selectFile = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n    // setSelectedFile(event.target.files[0]);\r\n  };\r\n\r\n  const upload = (e) => {\r\n    e.preventDefault();\r\n    let currentFile = selectedFiles[0];\r\n    setCurrentFile(currentFile);\r\n\r\n    const uploadImage = async () => {\r\n      let formData = new FormData();\r\n      formData.append(\"image\", selectedFiles[0]);\r\n\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"multipart/form-data\",\r\n          },\r\n        };\r\n        //destructuring original => res.data\r\n        const { data } = await axios.post(\r\n          \"http://localhost:9090/api/elearning/file/uploadimg\",\r\n          {\r\n            image: currentFile,\r\n            courseId: selectedCourse.value,\r\n            userId: userID,\r\n            chapterId: selectedChapter.value,\r\n            subtId: selectedSubtopic.value,\r\n          },\r\n          config\r\n        );\r\n\r\n        //getCoursesList();\r\n        setSelectedCourse(\"\");\r\n        setSelectedChapter(\"\");\r\n        setSelectedSubtopic(\"\");\r\n        \r\n\r\n        // setMnfId(data);\r\n        // console.log(mnfId);\r\n        alert(data.message);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    // if (selectedSegName.value === \"1\") {\r\n    //   // submit chapter details along with uploaded file\r\n    //   const submitCourse = async () => {};\r\n    // }\r\n    // //else submit course and chapter details along with uploaded file\r\n    // if (selectedSegName.value === \"2\") {\r\n    //   //\r\n    //   const submitChapter = async () => {};\r\n    // }\r\n\r\n    // //else submit course, chapter and subtopic details along with uploaded file\r\n    // if (selectedSegName.value === \"3\") {\r\n    //   //\r\n    //   const submitSubt = async () => {};\r\n    // }\r\n\r\n    uploadImage();\r\n  };\r\n\r\n  const changeHandler = (event) => {\r\n    setSelectedFile(event.target.files[0]);\r\n    console.log(event.target.files);\r\n    // setIsSelected(true);\r\n  };\r\n\r\n  const handleSubmission = async (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    setMessage(\"User Register Successfully\");\r\n    //on submit sucessfull redirec to next form to NewCourseTopic get course details\r\n\r\n    // navigate(\"/instructor/newtutorial/newchapter\")\r\n  };\r\n\r\n  //   const handleChange = (e) => {\r\n  //   const handleChange = (e) => {\r\n  //   const handleChange = (e) => {\r\n\r\n  //   const handleChange = (e) => {\r\n  //     setFlag(e.target.value);\r\n  //     console.log(\"flag\", flag);\r\n  //   };\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"cat: \", selectedSegName);\r\n  // }, [selectedSegName]);\r\n\r\n  const options = [\r\n    { value: \"0\", label: \"Select\" },\r\n    { value: \"1\", label: \"Course\" },\r\n    { value: \"2\", label: \"Chapter\" },\r\n    { value: \"3\", label: \"Subtopic\" },\r\n  ];\r\n\r\n  return (\r\n    <Container className=\"mt-5\">\r\n      <Row className=\"pt-5 mb-5\">\r\n        <Col sm={{ size: 6, offset: 3 }}>\r\n          <Card color=\"dark\" outline>\r\n            <CardHeader className=\"text-center\">\r\n              <h3>Upload Videos</h3>\r\n            </CardHeader>\r\n            <CardBody>\r\n              <>\r\n                <>\r\n                  <Label for=\"\">Select Course</Label>\r\n                  <Select\r\n                    value={selectedCourse}\r\n                    onChange={(item) => {\r\n                      setSelectedCourse(item);\r\n                    }}\r\n                    options={coursesList}\r\n                    // getOptionValue={(item) => item}\r\n                    // getOptionLabel={(item) => item}\r\n                    placeholder={\r\n                      selectedCourse === \"\"\r\n                        ? \"Select course for you want to upload\"\r\n                        : selectedCourse\r\n                    }\r\n                    required={true}\r\n                  />\r\n                </>\r\n\r\n                <>\r\n                  <Label for=\"\">Select Chapter Title</Label>\r\n                  <Select\r\n                    value={selectedChapter}\r\n                    onChange={(item) => {\r\n                      setSelectedChapter(item);\r\n                    }}\r\n                    options={chaptersDataList}\r\n                    // getOptionValue={(item) => item}\r\n                    // getOptionLabel={(item) => item}\r\n                    placeholder={\r\n                      selectedChapter === \"\"\r\n                        ? \"Select chapter\"\r\n                        : selectedChapter\r\n                    }\r\n                  />\r\n                </>\r\n\r\n                <>\r\n                  <Label for=\"\">Select Subtopic Title</Label>\r\n                  <Select\r\n                    value={selectedSubtopic}\r\n                    onChange={(item) => {\r\n                      setSelectedSubtopic(item);\r\n                    }}\r\n                    options={subtopicList}\r\n                    // getOptionValue={(item) => item}\r\n                    // getOptionLabel={(item) => item}\r\n                    placeholder={\r\n                      selectedSubtopic === \"\"\r\n                        ? \"Select subtopic under u wanna upload \"\r\n                        : selectedSubtopic\r\n                    }\r\n                  />\r\n                </>\r\n\r\n                <>\r\n                  <label className=\"btn btn-default\">\r\n                    <input type=\"file\" onChange={selectFile} />\r\n                  </label>\r\n\r\n                  <button className=\"btn btn-success\" onClick={upload}>\r\n                    Upload\r\n                  </button>\r\n                </>\r\n\r\n                {/* <Label for=\"\">Select upload type</Label>\r\n                <Select\r\n                  value={selectedSegName}\r\n                  onChange={(item) => {\r\n                    setSelectedSegName(item);\r\n                  }}\r\n                  options={options}\r\n                />\r\n                <hr />\r\n\r\n                {selectedSegName.value === \"1\" ? (\r\n                  <>\r\n                    <>\r\n                      <Label for=\"\">Select Course</Label>\r\n                      <Select\r\n                        value={selectedCourse}\r\n                        onChange={(item) => {\r\n                          setSelectedCourse(item);\r\n                        }}\r\n                        options={coursesList}\r\n                        // getOptionValue={(item) => item}\r\n                        // getOptionLabel={(item) => item}\r\n                        placeholder={\r\n                          selectedCourse === \"\"\r\n                            ? \"Select course for you want to upload\"\r\n                            : selectedCourse\r\n                        }\r\n                        required={true}\r\n                      />\r\n                    </>\r\n                    <>\r\n                      <label className=\"btn btn-default\">\r\n                        <input type=\"file\" onChange={selectFile} />\r\n                      </label>\r\n\r\n                      <button className=\"btn btn-success\" onClick={upload}>\r\n                        Upload\r\n                      </button>\r\n                    </>\r\n                  </>\r\n                ) : selectedSegName.value === \"2\" ? (\r\n                  <>\r\n                    <>\r\n                      <Label for=\"\">Select Course</Label>\r\n                      <Select\r\n                        value={selectedCourse}\r\n                        onChange={(item) => {\r\n                          setSelectedCourse(item);\r\n                        }}\r\n                        options={coursesList}\r\n                        // getOptionValue={(item) => item}\r\n                        // getOptionLabel={(item) => item}\r\n                        placeholder={\r\n                          selectedCourse === \"\"\r\n                            ? \"Select course for you want to upload\"\r\n                            : selectedCourse\r\n                        }\r\n                        required={true}\r\n                      />\r\n                    </>\r\n\r\n                    <>\r\n                      <Label for=\"\">Select Chapter Title</Label>\r\n                      <Select\r\n                        value={selectedChapter}\r\n                        onChange={(item) => {\r\n                          setSelectedChapter(item);\r\n                        }}\r\n                        options={chaptersList}\r\n                        // getOptionValue={(item) => item}\r\n                        // getOptionLabel={(item) => item}\r\n                        placeholder={\r\n                          selectedChapter === \"\" ? \"Select \" : selectedChapter\r\n                        }\r\n                      />\r\n                    </>\r\n\r\n                    <Form onSubmit={submitHandler}>\r\n                      <FormGroup>\r\n                        <Label for=\"userVideo\">Upload Videos for Chapter</Label>\r\n                        <Input\r\n                          id=\"userVideo\"\r\n                          type=\"file\"\r\n                          // value={address}\r\n                          onChange={(e) => {}}\r\n                        />\r\n                      </FormGroup>\r\n\r\n                      <Container className=\"text-center\">\r\n                        <Button type=\"submit\" color=\"success\">\r\n                          Submit\r\n                        </Button>\r\n                      </Container>\r\n                    </Form>\r\n                  </>\r\n                ) : selectedSegName.value === \"3\" ? (\r\n                  <Form onSubmit={submitHandler}>\r\n                    <>\r\n                      <>\r\n                        <Label for=\"\">Select Course</Label>\r\n                        <Select\r\n                          value={selectedCourse}\r\n                          onChange={(item) => {\r\n                            setSelectedCourse(item);\r\n                          }}\r\n                          options={coursesList}\r\n                          // getOptionValue={(item) => item}\r\n                          // getOptionLabel={(item) => item}\r\n                          placeholder={\r\n                            selectedCourse === \"\"\r\n                              ? \"Select course under u wanna upload\"\r\n                              : selectedCourse\r\n                          }\r\n                          required={true}\r\n                        />\r\n                      </>\r\n\r\n                      <>\r\n                        <Label for=\"\">Select Chapter Title</Label>\r\n                        <Select\r\n                          value={selectedChapter}\r\n                          onChange={(item) => {\r\n                            setSelectedChapter(item);\r\n                          }}\r\n                          options={chaptersList}\r\n                          // getOptionValue={(item) => item}\r\n                          // getOptionLabel={(item) => item}\r\n                          placeholder={\r\n                            selectedChapter === \"\"\r\n                              ? \"Select chapter under u wanna upload\"\r\n                              : selectedChapter\r\n                          }\r\n                        />\r\n                      </>\r\n\r\n                      <>\r\n                        <Label for=\"\">Select Subtopic Title</Label>\r\n                        <Select\r\n                          value={selectedSubtopic}\r\n                          onChange={(item) => {\r\n                            setSelectedSubtopic(item);\r\n                          }}\r\n                          options={subtopicList}\r\n                          // getOptionValue={(item) => item}\r\n                          // getOptionLabel={(item) => item}\r\n                          placeholder={\r\n                            selectedSubtopic === \"\"\r\n                              ? \"Select subtopic under u wanna upload \"\r\n                              : selectedSubtopic\r\n                          }\r\n                        />\r\n                      </>\r\n                    </>\r\n                    <FormGroup>\r\n                      <Label for=\"userVideo\">Upload Videos for Subtopic</Label>\r\n                      <Input\r\n                        id=\"userVideo\"\r\n                        type=\"file\"\r\n                        // value={address}\r\n                        onChange={(e) => {}}\r\n                      />\r\n                    </FormGroup>\r\n\r\n                    <Container className=\"text-center\">\r\n                      <Button type=\"submit\" color=\"success\">\r\n                        Submit\r\n                      </Button>\r\n                    </Container>\r\n                  </Form>\r\n                ) : (\r\n                  <></>\r\n                \r\n                \r\n                )} */}\r\n\r\n                <hr />\r\n              </>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default VideoUpload;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}