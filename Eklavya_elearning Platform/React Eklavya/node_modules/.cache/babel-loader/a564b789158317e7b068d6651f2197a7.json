{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SUSH\\\\Desktop\\\\Project Major\\\\Project2\\\\E-learning Backend+Frontend v1.1\\\\frontend-elearning\\\\frontend-elearning\\\\src\\\\screens\\\\ChatBot.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport \"./ChatBot.css\";\nimport image from \"../assets/images/botimage.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatBot = () => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [botStatus, setBotStatus] = useState(true); // Bot is active by default\n\n  useEffect(() => {\n    checkBotStatus(); // Check bot status on component mount\n  }, []);\n\n  const checkBotStatus = () => {\n    const date = new Date();\n    const day = date.getDay();\n    const month = date.getMonth();\n    const year = date.getFullYear();\n    const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    const dateTime = `${days[day]}, ${months[month]} ${year}`;\n    setBotStatus(dateTime !== \"Thursday, Aug 13 2022\"); // Bot is active if not August 13, 2022\n  };\n\n  const handleInput = () => {\n    if (inputText.trim() === '') return; // Ignore empty messages\n    // Update user messages\n\n    setMessages(prevMessages => [...prevMessages, {\n      text: inputText,\n      type: 'user'\n    }]); // Clear input field\n\n    setInputText(''); // Handle bot response\n\n    setTimeout(() => {\n      const botResponse = generateBotResponse(inputText);\n      setMessages(prevMessages => [...prevMessages, {\n        text: botResponse,\n        type: 'bot'\n      }]);\n    }, 500);\n  };\n\n  const generateBotResponse = input => {\n    // Logic for generating bot responses based on user input\n    // You can implement your bot's logic here\n    return \"Bot response for: \" + input;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"img\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: image,\n              alt: \"ChatBot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"right\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"name\",\n              children: \"ChatBot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `status ${botStatus ? 'active' : 'inactive'}`,\n              children: botStatus ? 'Active' : 'Not Active'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"main\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main_content\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"messages\",\n              children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `message ${message.type}`,\n                children: message.text\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"btm\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: inputText,\n                onChange: e => setInputText(e.target.value),\n                placeholder: \"Enter your message\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"btn\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleInput,\n                children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"fas fa-paper-plane\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 19\n                }, this), \"Send\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatBot, \"6FbmMa6UjLcxkPJ5cs6driHmun8=\");\n\n_c = ChatBot;\nexport default ChatBot;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","image","ChatBot","messages","setMessages","inputText","setInputText","botStatus","setBotStatus","checkBotStatus","date","Date","day","getDay","month","getMonth","year","getFullYear","days","months","dateTime","handleInput","trim","prevMessages","text","type","setTimeout","botResponse","generateBotResponse","input","map","message","index","e","target","value"],"sources":["C:/Users/SUSH/Desktop/Project Major/Project2/E-learning Backend+Frontend v1.1/frontend-elearning/frontend-elearning/src/screens/ChatBot.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport \"./ChatBot.css\";\r\nimport image from \"../assets/images/botimage.jpg\";\r\n\r\nconst ChatBot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputText, setInputText] = useState('');\r\n  const [botStatus, setBotStatus] = useState(true); // Bot is active by default\r\n\r\n  useEffect(() => {\r\n    checkBotStatus(); // Check bot status on component mount\r\n  }, []);\r\n\r\n  const checkBotStatus = () => {\r\n    const date = new Date();\r\n    const day = date.getDay();\r\n    const month = date.getMonth();\r\n    const year = date.getFullYear();\r\n\r\n    const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n    const dateTime = `${days[day]}, ${months[month]} ${year}`;\r\n\r\n    setBotStatus(dateTime !== \"Thursday, Aug 13 2022\"); // Bot is active if not August 13, 2022\r\n  };\r\n\r\n  const handleInput = () => {\r\n    if (inputText.trim() === '') return; // Ignore empty messages\r\n\r\n    // Update user messages\r\n    setMessages(prevMessages => [...prevMessages, { text: inputText, type: 'user' }]);\r\n    \r\n    // Clear input field\r\n    setInputText('');\r\n\r\n    // Handle bot response\r\n    setTimeout(() => {\r\n      const botResponse = generateBotResponse(inputText);\r\n      setMessages(prevMessages => [...prevMessages, { text: botResponse, type: 'bot' }]);\r\n    }, 500);\r\n  };\r\n\r\n  const generateBotResponse = (input) => {\r\n    // Logic for generating bot responses based on user input\r\n    // You can implement your bot's logic here\r\n    return \"Bot response for: \" + input;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"wrapper\">\r\n        <div className=\"content\">\r\n          <div className=\"header\">\r\n            <div className=\"img\">\r\n              <img src={image} alt=\"ChatBot\" />\r\n            </div>\r\n            <div className=\"right\">\r\n              <div className=\"name\">ChatBot</div>\r\n              <div className={`status ${botStatus ? 'active' : 'inactive'}`}>\r\n                {botStatus ? 'Active' : 'Not Active'}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"main\">\r\n            <div className=\"main_content\">\r\n              <div className=\"messages\">\r\n                {messages.map((message, index) => (\r\n                  <div key={index} className={`message ${message.type}`}>\r\n                    {message.text}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"bottom\">\r\n            <div className=\"btm\">\r\n              <div className=\"input\">\r\n                <input\r\n                  type=\"text\"\r\n                  value={inputText}\r\n                  onChange={(e) => setInputText(e.target.value)}\r\n                  placeholder=\"Enter your message\"\r\n                />\r\n              </div>\r\n              <div className=\"btn\">\r\n                <button onClick={handleInput}>\r\n                  <i className=\"fas fa-paper-plane\"></i>Send\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}